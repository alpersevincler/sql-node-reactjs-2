- SQL Server bağlantısını gerçekleştirmek ve server'daki bilgileri konsolda yazdırmak için:
    dbFiles klasörü altına dbConfig.js dosyasını oluştur ve içine SQL Server'a bağlantı bilgilerini içeren tanımlamayı yap
    dbFiles klasörü altına dbOperation.js dosyasını oluştur ve içine dbConfig.js'i ve mssql kütüphanesini import et
        dbOperation.js'de import ettiğin config'i, mssql kütüphanesine göndererek bağlantıyı gerçekleştir.
        Sonra mssql kütüphanesini kullanarak sorgu gönder ve bunu return et.
        Tüm bunları bir fonksiyon içerisinde yap.
    Ana dizine server.js dosyasını oluştur ve içine dbOperation.js'i import et.
        dbOperation'un içindeki fonksiyonu çağır ve oradan gelecek cevabı konsolda yazdırabilirsin

- package.json dosyasına "server": "nodemon server.js", ifadesini eklersen konsola "npm run server" yazdıktan sonra artık nodemon 
    her kayıt aldığında otomatik server.js'i çalıştıracaktır

- Manuel Create işlemi kurgulamak adına:
    dbFiles klasörü altına employee.js dosyasını oluştur, içine satır bilgilerini parametre alacak şekilde kurgula
    dbOperation.js dosyasında createEmployee adında, INSERT sorgusunu gönderecek metodu kurgula
    server.js'de employee.js'in sınıf modülünü çağırıp satır bilgilerini employee.js'e parametre olarak gönder. Gelen cevabı değişkene atayıp,
     bunu dbOperation'daki createEmployee metoduna parametre olarak gönder

- Konsola "npm i npm-run-all" yazıp npm-run-all paketini indirerek aynı anda hem Server'ı hem de React uygulamasını başlatabilirsin
    Paketi yükledikten sonra package.json dosyasındaki "scripts": bloğunun altına "dev": "run-p server start" ifadesini yaz.
     Böylece konsola npm run dev yazınca paralel olarak "scripts": bloğunun altındaki hem "server": hem de "start" tanımlamaları çalıştıracaktır

- API Portunun 5000 de düzgün şekilde koşması için package.json'daki genel bloğun içine "proxy": "http://localhost:5000" ifadesini yazmalısın

- Sayfada Firstname bilgisi girilen kişininin(employee) Click butonuna tıklandığında bütün bilgilerinin gösterilmesi:
    Sayfadaki input'lara bilgi girildiği anda App.js'deki setInput metodu çalışacak ve bu metot girilen bilgileri useState ile tanımlanan employee'ye set edecek(gönderecek)
    Click butonuna tıklandığında App.js'deki fetchData metodu çalışacak. Bu metot server.js'deki app.post('/api',...) yapısını tetikleyecek ve employee'nin içindeki 
        Firstname bilgisini hazır hale getirecek.
    server.js'deki post yapısı aldığı Firstname bilgisini dbOperation.js'deki getEmployees metoduna gönderecek ve oradan gelen cevabı(DB'den gelen cevap) 
        geri response olarak dönderecek(App.js'deki fetchData'nın içindeki newData'ya döndermiş olacak)
    dbOperation.js'deki getEmployees metodu aldığı Firstname bilgisini kullanarak DB'ye sorgu gönderecek. DB'den gelen aynı Firstname bilgisine dahip satır bilgisini
        geri return edecek(server.js'deki post yapısına return etmiş olacak)
    App.js'deki fetchData metodu kendine cevap olan gelen bilgiyi(Sayfada yazılan Firstname'in, DB'deki Firstname'i aynı olan datayı) useState ile tanımlanmış 
        returnedData'ya set edecek(gönderecek)
    Son olarak sayfada returnedData'daki bilgileri teker teker ilgili yere yazdıracağız
    

